/* Препроцессоры SASS SCSS LESS */

/* в стандартном css для того чтобы выполнять большие стилистичекие операции */
/* нужно было использовать большую вложенность css селекторов */

/* также приходится часто прописывать одно и тоже свойство, например цвет */
/* можно вынести конструкцию с цветом в переменную и потом просто её указывать */
/* таким образом мы избежим повторения кода и при необходимости одним разом поменяем цвет везде */
/* чтобы избежать постоянного указывания больших конструкций селекторов - создали препроцессоры */

/* SASS самый популярный сейчас препроцессор */
/* обычно в папке проекта создаётся папка по названию используемого препроцессора */
	
// Всё что мы здесь напишем нам бует нужно скомпилировать под обычный css

// чтобы преобразовать sass в css для дальнейшего подключения к html есть несколько способов

// 1: отдельные программы
// 2: расширения VS CODE
// 3: использование планировавщиков задач как Gulp

// ===================================================================

// 1: программы Scout-App или Koala
// https://scout-app.io/
// Scout-App работает только с SASS и SCSS
// при использовании других препроцессоров лучше использовать Koala

// основы синтаксиса
// при использовании SASS мы полностью отказываемся от {} и ;
h1
	color: green
	// если подключить программу, в файле css сразу отобразится код
	// для правильного применения SASS мы используем не фигурные скобки а отступы
	font-size: 50px

h2
	color: blue
	// минифирование файла позволяет съэкономить размер файла
	// каждый пробел, каждый перенос строки - лишняя информация и размер файла

// если бы нужно было стилизовать заголовок внутри через css
// мы прописали вложенность селекторов - .block h3
// в SASS нужно сделать просто сноску на новую строку
.block
	background-color: black
	h3
		color: white
	&_color // & - амперсант
		background-color: #1e1e1e
		// у класса .block есть ещё вложенный блок .block_color
		button
			width: 250px

// указание через амперсант указывает в css как - .block_color
// так же работает и обычная вложенность, если указать
.block
	.block_color
	// отобразится как - .block .block_color

// если какая то величина постоянно повторяется, например цвет текста
// мы можем задать переменную, обычно онка указывается в начале файла
$text_color: red

h1
	color: $text_color

// в переменную можно поместить значение а можно использовать конструкции - миксины
@mixin box
	display: block
	width: 250px
	height: 200px
	background-color: green

.block
	&_color
		button
			@include box
			// include - директива включения миксина
			// теперь все 4 стиля применились к кнопке

// у миксин есть другой синтаксис
=box
	display: block
	width: 250px
	height: 200px
	background-color: green

.block
	&_color
		button
			+box
			// всё также будет работать но такой синтаксис менее понятен

// ===================================================================

// 2: чтобы компилировать код внутри VS CODE нужно установить плагин
// live sass compiler
// для запуска внизу появится кнопка Watch Sass
// его нужно настроить, нажимаем на шестерёнку и заходим в settings
// переходим в раздел extensions и находим плагин live sass compiler
// переходим в Edit in settings.json и добавим из официальной документации
// https://github.com/ritwickdey/vscode-live-sass-compiler/blob/master/docs/settings.md

 "liveSassCompile.settings.formats":[
        {
            "format": "compressed",
            "extensionName": ".min.css",
            "savePath": "~/../css/"
        }
    ],
 "liveSassCompile.settings.autoprefix": [
       "> 1%",
       "last 2 versions"
   ]

// ===================================================================

// разница между препроцессорами
// они все выполняют одну задачу, отличаются только в синтаксисе
// в SCSS всё также только используются скобки