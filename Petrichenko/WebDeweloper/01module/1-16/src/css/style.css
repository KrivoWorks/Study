/* CSS как и HTML не являются языками программирования */
@import 'css/buttons.css';
/* вариант подключения файла css к текущему файлу */
/* так можно объединить несколько файлов в один большой и его подключить */

/* CSS селектор */
/* селектор - это то по какому параметру или свойству можем обратиться к элементу на странице */
/* к селекторам могут относиться классы, id, дата атрибуты и вложенность всего этого*/
/* id должен быть только один на странице */
selector {
    color: red; /* свойство: значение */
}

/* Вложенность */
selector a { /* обращаемся к ссылке, тег a */
    color: red; /* свойство: значение */
    color: #ff33aa; /* HEX формат */
    color: rgb(122, 145, 001); /* RGB формат */
    color: rgba(122, 145, 001, 0.5); /* a - альфа канал */
}

* { /* селектор для всего на странице */
    box-sizing: border-box; /* описание ниже - блочная модель документа*/
}

h2 {
    text-align: center; /* выровнять текст по центру */
    font-style: italic; /* текст курсивом */
    /* text-decoration: underline; подчёркнутый текст */
    /* text-decoration: line-through; зачёркнутый текст */
    font-size: 30px; /* размер текста */
    /* stext-transform: uppercase; текст в верхнем регистре */
    /* text-transform: lowercase; текст в нижнем регистре */
}

/* ранее в html записали теги делающие все эти действия */
/* сейчас хорошим тоном считается использование css стилей */
/* выделять текст в html можно через тег <span> */

#begin {
    font-weight: normal; /* жирность текста */
}

/* =================================================================== */

/* Блочная модель документа */
/* Все элементы на странице имеют прямоугольную форму */
/* даже круги и овалы - это модифицированные прямоугольники */
/* как у любого прямоугольника у него есть две главнфе величины, это ширина и высота */

.box {
    display: inline-block; /* к теме карточной колоды, ниже */
    width: 300px;
    height: 300px;
    background-color: green;
    /* отступы внутри бокса */
    padding: 20px 50px; /* первая часть отвечает за вертикальные отступы, а вторая за горизонтальные */
    /* padding: 20px 50px 40px 15px; - свойства идут по часовой начиная сверху*/
    /* border-width: 3px; - толщина границы */
    /* border-style: solid; - сплошная неприрывная линия */
    /* border-color: black; - цвет */
    border: 3px solid black; /* комбинированное свойство */
    margin: 20px; /* внешние отступы */
}

/* все элементы на странице делятся на 3 вида по своей структуре */
/* БЛОЧНЫЕ */
/* СТРОЧНЫЕ */
/* СТРОЧНО-БЛОЧНЫЕ */

/* блочные */
/* блочные элементы на странице формируют каркас страницы, те разделение его на области */
/* каждый блочный элемент захватывает всю область по ширине - margin */
/* если не указать ширину блока, он захватит всю ширину которая ему доступна */
/* если убрать заданную высоту блока он сожмётся по высоте и оставит только padding */
/* в консоле разработчика можно посмотреть стиль элемента заданный по умолчанию */
/* user agent stylesheet - display: block; */
/* таким образом можно узнать блочный это элемент или стройчный, или строчно-блочный */

/* если посмотреть на элемент через инспектор, обнаружим размер 346х346 */
/* а заданный размер в CSS правиле 300х300 пикселей */
/* это происходит потому-что элемент объединяет в себе и паддинг и бордер и марджин */
/* но в реальных проктах мы часто хотим, чтобы блок занимал задаваемый размер */
/* для исправления этой ситуации есть свойство box-sizing */
/* именно его нужно устанавливать для элементов, чтобы поменялось это поведение */
/* у него всего два свойства - border-box и стандартное поведение content-box */
/* чаще всего это свойство указывается в самом начале для всего * */

/* строчные */
/* когда структура есть, нужно сайт чем то наполнить, этим занимаюся строчные элементы */
/* они нужны для наполнения сайта. Классический пример это ссылка, тег a */
/* в инспекторе во вкладке Computed есть свойство display со значением inline */
/* строчные элементы занимают столько места, сколько в них контента, в отличии от блочных элементов */

a {
    padding: 20px; /* если проверим, паддинги работают */
    margin: 20px; /* а марджин появился только слева и справа это особенность строчных элементов */
    width: 500px; /* как стиль ширина применится но ничего не поменяется */
    /* строчные элементы не реагируют на свойство ширины */
    /* потому что занимают столько ширины сколько в них есть контента */
    /* картинка в ссылке встанут в одну строку, картинки в html это тоже строчные элементы */
    /* у блочного элемента можно в ручную изменить значение display */
    /* так и ссылку можно превратить в блок, который будет вести себя как блок */
}

/* тег p параграф - является блочным элементом */

/* строчно-блочные элементы */


bb { /* это комбинация блочных и строчных элементов, */
    display: inline-block; /* только они взяли самое лучшее из блочных и лучшее из строчных элементов */
}
/* от блочных они взяли все параметры которые есть в блочной модели css */
/* теперь к строчно-блочным элементам можно применять margin и padding */
/* а от строчных они взяли расположение в одной строке */

img {
    display: block; /* картинка и ссылка будут друг на другом а не в линию */
    /* выравниваем картинку по горизонтали */
    margin: 0 auto; /* ставим внешние оступы по вертикали 0 а по горизонтали авто */
    /* картинка встаёт по середине страницы */
    /* но выровнять картинку таким способом по горизонтали не получится */
    width: 500px;
}

/* =================================================================== */

/* позиционирование элементов в CSS */
nav {
    /* position: static; позиция по умолчанию у всех элементов */

    /* position: relative; за счёт позиции мы теперь можем располагать элемент как захотим */
    /* left: 130px; меню ушло вправо на 130px */
    /* top: 150px; меню сместилось вниз на 150px */
    /* если позиция была static этих свойств top, right, bottom, left у элемента не было */
    /* на практике позия relative помагает смешать элементы которые нас не слушаются */
    
    position: absolute; /* позволяет любой элемент располагать где нам хочется */
    /* при позиции absolute элемент выпадает из списка html */
    /* right: 0; меню сместилось к правому краю */
    top: 50px; /* меню сместилось вниз на 50px и она прижата к правому краю */
    /* при помощи позиции absolute элемент можно расположить в любой части страницы */
    /* но это формально, на практике элементы расположены блок в блоке */
    /* на нашем примере nav расположен в родительском теге body */
    /* но обернём его в div и дадим класс example */
}

.example {
    background-color: #aeaeae;
    height: 500px; /* задаём высоту но блок nav не переместился */
    /* потому что он думает, что находится до сих в родителе body */
    /* чтобы это исправить нужно установить позицию relative */
    position: relative; /* теперь блок позиционируется относительно nav */
}

/* это происходит потому-что позиция absolute работает только внутри блока с позицией relative */
/* если у родителя убрать позицию relative - меню опять будет позиционироваться от body */
/* у тега body уже установлена позиция relative */
/* поэтому когда устанавливаем absolute, элемент думает, что его родитель body */
/* если мы хотим абсолютно спозиционировать элемент внутри другого элемента */
/* то должны спозиционировать absolute внутри relative родительского элемента */

/* position: fixed - элемент прилепает к экрану */
/* часто используется для создания липких меню, разных виджетов и модульных окон */

/* position: inherit - мы берём свойство и наследуем от нашего родителя */
/* если взять дочерний элемент родителя с позицией relative и назначить ему inherit */
/* в панели разработчика увидим в правилах css позицию inherit */
/* но в computed позиция будет absolute */

/* =================================================================== */

/* принцип карточной колоды */
/* часть элементов на странице можно располагать вообще произвольно на странице */
/* некоторые элементы могут пересекаться друг с другом */
/* например фиксированная менюшка при пролистывании страницы может наезжать на другие элементы */
/* которые абсолютно позиционированы на странице */
/* и тогда возникнет конфликт, что именно показывать пользователю на первом плане */


/* возьмём два квадрата внизу страницы и обернём их в div */
.red {
    background-color: red; /* за счёт того, что этот класс стоит последним, */
    /* он будет перебивать тот цвет который уже есть */
    /* position: absolute; добавим позицю, тк раньше была просто static */
    /* теперь когда у родителя позиция relative а у наследника абсолютная позиция */
    /* он будет вести себя по другому, он будет выпадать из общей вёрстки */
    /* если сохраним и проверим, внешне ничего не изменится, потому что это строчно-блочный элемент */

    /* зададим, куда нужно двигаться элементу */
    left: 30px; /* результат - элемент подвинулся на 30px от левого края и заслонил зелёный квадрат */
    /* если увеличить left до 80px он будет заслонять и второй зелёный квадрат */

    /* если мы хотим подвинуть зелёные квадраты на передний план, используем свойство z-index */
}

.box {
    /* z-index: 5; это свойство отвечает за позиционирование элементов по оси z */
    /* тот индекс который больше, тот и выходит на первый план */
    /* если сохраним, увидим, что пока ничего не поменялось */
}

.red { /* если пропишем красному квадрату 4, то тоже ничего не поменяется */
    /* z-index: 4; здесь кроется ошибка, красный квадрат абсолютно спозиционирован */
    /* он будет всегда главнее, чем те элементы которые под ним */
    /* чтобы отобразить сзади абсолютно спозиционированный элемент  */
    /* нужно установить отрицательное значение */
    /* z-index: -1; красный блок ушёл подж зелёный */
    /* если родителю box установить позицию absolute, и red z-index 6, красный квадрат будет спереди */
    /* если у red будет 4 он будет сзади под зелёными квадратами */
    
    /* у static можно задать любой z-index но он никогда не выйдет на первый план, над абсолютом */
}

.exampleBox {
    position: relative;
}

/* =================================================================== */

/* Вертикальное выравнивание */
/* если заглянуть в справочник, значений display намного больше, чем разобрали */
/* много значений относится именно к table */
/* раньше (до 2000 года) сайты создавались с помощью таблиц */
/* таблица как в exele и в ячейках располагались элементы */
/* на практике это неудобно, сейчас никто не верстает сайты таблицами */
/* сейчас это нужно знать или для поддержания старых сайтов или в html письмах */
/* но чтобы сейчас есть инструменты которые делают эти письма за вас */
/* в ячейках таблицы можно выравнивать текст вручную, это неудобно */
/* на смену пришёл способ с помощью флоатов */
/* float это свойство css которое отвечает за обтекание текстом какого то элемента */
/* флоты могут встретиться уже в современнных проектах */

/* в html у картинки удалим (закоментируем) div и ссылку */
img {
    /* float: left; */
}
/* картинка прижалась к левому краю и её обтекают блоки */
/* элемент может обтекать не только текст но и другие блочные элементы */
/* если под картинкой в Lorem добавить текст, он также будет обтекаю её справа */
/* такой способ раньше использовался, чтобы заменить таблицы */
/* но и рождает несколько проблем в тч и выпадение блоков */
/* в реальных проектах это сейчас не используется */

/* сейчас IE не поддерживает flex box вёрстку */
/* поэтому там иногда приходится верстать с помощью inline block */
/* закоментируем float */

/* для того чтобы выравнивать элементы по вертикали потребуется свойство vertical-align */
/* но это свойство работает только тогда, когда у элементов стоит display inline-block */
/* к блочным или строчным элементам это свойство не применяется */

.box {
    vertical-align: top; /* все блоки выровнялись по верхнему краю */
} /* если задать красному квадрату высоту 100px он всё равно будет прижат к верхней границе */
/* и нам нужно выровнять по центру все квадраты */
/* и тогда vertical-align выставляем middle */
/* и теперь все элементы с display inline-block выровнялись по центру */

/* =================================================================== */

/* Величины в CSS */
/* что ещё можно использовать кроме пикселей */
/* все величины можно разделить на 2 большие группы */
/* это относительные величины и абсолютные */
/* относительные величины зависят от какого-то другого параметра, например пиксель */
/* это мельчайшая частичка экрана, это одна точка */
/* поэтому пиксель зависит от устройства на котором вы просматриваете изображение */
/* он зависит от размера экрана и разрешения */

/* самое очевидное, что можно ещё применить это процент */
/* если классу red задать величину 50% он растанется на относительную ширину */
/* ширину родителя элемента, exampleBox занимает весь экран */
/* также работает и высота, если установить высоту 50%, он займёт 50% высоты родителя */
/* но у некоторых элементов просто не существует родителя */
/* если exampleBox установить высоту 50% ничего не произойдёт, ведь его родитель body */
/* у body фиксированный высоты нет */
/* при использовании % нужно обращать, чтобы у родителя была фиксированная высота или ширина */

/* EM и EX */
/* EM - высота шрифта текущего элемента, font size */
/* EX - зависит от высоты символа х */

.red {
    font-size: 30px;
    width: 50em;
} /* ширина блока стала 1500 пикселей */
/* это получилось потому-что взялся размер шрифта и умножился на 50 единиц */
/* в реальной практике это почти не используется */
/* потому что в разных блоках может разная величина шрифта */

/* абсолютные величины */
/* абсолютные еденицы чётко заданы, это саниметр, миллиметр, дюйм, пункт и пика */
/* это не используется потому-что мониторы сантиметрами или миллиметрами не меряются */
/* в типографии наоборот используются эти величины в отличии от вёрстки */

/* новые величины в CSS c 2013 года */
/* REM VH VW - это относительные величины которые зависят от другого параметра */
/* если у квадрата задать ширину 50rem - он возьмёт размер шрифта корневого элемента */
/* например если у red убрать размер а в теге html Задать font-size 30px */
/* ширина блока будет 1500px */

/* vw - 1/100 ширины нашего окна */
/* vh - 1/100 высоты нашего окна */
/* если задать эти показатели, размер блока будет меняться с размером нашего окна */
/* эти величины конкурируют с процентами, но проценты иногда могут не срабатывать */
/* потому что у родителя может не быть ширины или высоты, а эти величины будут работать всегда */