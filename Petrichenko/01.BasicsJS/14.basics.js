"Use strict";

// Событие - это сигнал от браузера, что - что-то произошло
// клик, двойной клик, наведение мыши, или убрать мышь с элемента, прокрутка мыши, отправка данных формы

// Список событий в JavaScript
// чтобы использовать любое событие, мы должны назначить обработчик событий
// обработчик - это функция, которая срабатывает, как только событие произошло
// если пользователь делает щелчок мышью на гамбургер меню, то срабатывает функция которая открывает это меню
// если пользователь нажимает кнопку "отправить данные" - то эти данные отправятся на сервер

// в JS 3 способа назначить обработчик событий


//===================================================================


// 1й способ - использовать html атрибут который записывается прямо в вёрстке
// в реальных проектах данный способ не используется и подходит только для маленьких скриптов или тестовых проектов
// <body>
//     <button onclick="alert('Click')" id="btn">Нажми на меня</button>
// </body> // onclick="alert('Click')" - html атрибут
// Click - событие
// alert - обработчик событий


//===================================================================


// 2й способ - использовать свойство DOM дерева для событий
const btn = document.querySelector("button");
// устанавливаем элемент (btn) на который хотим повестить событие и дальше свойство DOM дерева
btn.onclick = function() { // присваем функцию, которая по факту является методом
    alert("Click");
};
// в реальных проектах, такой код тоже практически не используется
// если код большой, и просто забудем что уже взаимодействовали с этим элементом
// при запуске двух обработчиков событий, мы получим сразу второе действие
// ещё нам иногда нужно удалять обработчики событий
// событие произошло и нам нужно чтобы с элементом больше нельзя было взаимодействовать
// событие назначенное такоим методом удалить мы не сможем


//===================================================================


// 3й способ - addEventListener
// дословно - addEventListener - слушатель за событиями
// JS будет следить за этим элементом, и если произошло это событие то он запустит обработчик
btn.addEventListener("click", () => { // первым аргументом передаём название события - click
// вторым аргументом идёи callback функция
    alert("Click");
}); // такие функции выполняются строго за другими
// у этого метода есть большой плюс, мы можем назначать несколько действий на одно событие

btn.addEventListener("click", () => { // первым аргументом передаём название события - click
    // вторым аргументом идёт callback функция 
    alert("Second click");
});


// нам иногда нужно получать данные о том элементе с которым мы взаимодействуем
// например - что за событие произошло, или что за элемент используется или координаты этого элемента
// для этого у нас есть специальный объект который называется - Event
// и точно так же как и другой объект в JS он может иметь свои свойства
// этот объект события передаётся как аргумент в callback функцию
// назвать его можно как угодно, но чаще всего называют Event или E
// объект события передаётся всегда первым аргументом
btn.addEventListener("mouseenter", (e) => { 
    console.log(e); // можем вывести Event в консоль и посмотреть, что внутри
// в консоле получаем MouseEvent - это объект который описывает, что произошло с элементом
// одни из самых важных свойств это "type" - тип события который произошёл 
// и target - элемент на котором произошло событие
    console.log(e.target); // мы сразу получаем доступ к этому элементу
// и теперь открываются большие возможности, этот элемент можем - перекрасить, поменять класс или удалить
// последнее и сделаем
    e.target.remove();
});


// иногда необходимо удалять обработчики событий с элементов, для этого есть метод - .removeEventListener
// но есть загвоздка, нам необходимо использовать точно такую же функцию как мы и назначали с помощью .addEventListener
// чтобы была возможность удалить функцию, необходимо вынести её в переменную
const deleteElement = (e) => {
    console.log(e.target);
};
// передаём название функции 
btn.addEventListener("click", deleteElement); // после того как выполнится клик по элементу, выполнится функция
// важен синтаксис, мы не вызываем deleteElement() а просто прописываем ссылку на функцию
btn.removeEventListener("click", deleteElement);

// пример использования
let i = 0;
const deleteElement2 = (e) => {
    console.log(e.target);
    i++;
    if (i === 1) {
        btn.removeEventListener("click", deleteElement2);
    }
};


//===================================================================


// всплытие событий
const overlay = document.querySelector(".overlay");

const deleteElement3 = (e) => {
    console.log(e.target);
    console.log(e.type);
};

overlay.removeEventListener("click", deleteElement3);
// в реальном коде такое может случиться - есть два элемента, один является родителем другого
// при этом на них назначены обработчики событий, которые обрабатывают одно и тоже действие
// в таком случае поведение следующее - сначала срабатывает действие на вложенном элементе
// а после поднимается по иерархии DOM дерева - вверх
// это и называется всплытие событий
// вэто когда обработчик событий сначала срабатывает на самом вложенном элементе, а затем на родителе


//===================================================================


// отмена стандартных действий (поведения) в браузере
// использование метода который существует у обработчика события
const link = document.querySelector("a");

link.addEventListener("click", (event) => { // ("click", function() {
    event.preventDefault(); // отмена стандартного поведения браузера

    console.log(event.target);
});


//===================================================================


// частая ошибка
// как один обработчик собтия навесить на несколько элементов ?
const btn2 = document.querySelectorAll("button"); // получаем сразу все элементы
btn2.addEventListener("click", deleteElement3);
// такой код работать не будет - потомуу что в переменной btn2 лежит псевдомассив

// поэтому, чтобы назначить каждому элементу обработчик событий, необходимо перебрать псевдомассив
btn2.forEach(btn => {
    btn.addEventListener("click", deleteElement3);
});


//===================================================================


// опция события у .addEventListener
// синтаксис - target.addEventListener(type, listener[, options]);
// опций несколько, но самый интересный - once - указывает, что это событие должно происходить только один раз
btn2.forEach(btn => {
    btn.addEventListener("click", deleteElement3, {once: true});
});