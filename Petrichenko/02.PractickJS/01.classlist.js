"Use strict";

//СВОЙСТВО CLASSLIST И ДЕЛЕГИРОВАНИЕ СОБЫТИЙ
const btns = document.querySelectorAll('button'); // по селектору тега получаем все кнопки
// чтобы обратиться к списку классов, необходимо прописать .classlist
// это свойство которое есть у этого DOM узла
console.log(btns.classlist); // не работает, мы получили псевдомассив, у него нет такого свойства
// нам необходимо обратиться к конкретному элементу
console.log(btns[0].classlist.length); // и дальше через точку прописываем, что нас интересует
// .length - свойство которое позволяет узнать количество классов у элемента
// в консоль попадёт число классов элемента, например 2 или 3

//===================================================================

// методы .classlist
console.log(btns[0].classlist.item()); // поскольку item это действие, нужны круглые скобки
console.log(btns[0].classlist.item(1)); // получим у кнопки класс под номером 2, индекс 1
// в консоле получим имя класса элемента

// часто используемые методы .classlist
console.log(btns[0].classlist.add('red')); // метод добавляющий класс элементу
// во вкладке elements панели разработчиков видим новый класс у элемениа

console.log(btns[0].classlist.remove('blue')); // метод удаляющий класс элемента

console.log(btns[0].classlist.toggle('blue')); // метод позволяющий тоглить классы
// если класс есть у элемента, он будет убран, если его нет - добавлен

console.log(btns[0].classlist.add('red, bubbb')); 
// через запятую можно добавлять, удалять или тоглить несколько классов

//===================================================================

// наличие класса можно использовать как условие
console.log(btns[0].classlist.item(1)); 
// проблема в том, что мы не всегда уверены, что класс находится на нужной позиции
// чтобы избежать этой неопределённости есть ещё один метод .contains
// он проверяет наличие класса на определённом элементе и возвращает булиновое значение
// если класс есть - true если нет - false
if (btns[1].classList.contains('red')) {
    console.log('red');
}

// пример использования - гамбургер меню, при нажатии, элементу добавляется класс
// hamburger - hamburger hamburger_active
// при повторном нажатии, класс убирается и меню скрывается

btns[0].addEventListener('click', () => {
    if (!btns[1].classList.contains('red')) {
    // мы проверяем, что такого класса у кнопки нет
        btns[1].classList.add('red');
    } else {
        btns[1].classList.remove('red');
    }
});
// когда кликаем на первую кнопку, проверяем вторую кнопку
// если у второй кнопки нет класса red мы его добавляем
// если класс red есть у кнопки мы его удаляем

btns[0].addEventListener('click', () => {
    btns[1].classList.toggle('red');
});
// код тоже работает, в toggle содержится такая же логическая конструкция
// но в сложных скриптах такое поведение не всегда доступно, 
// иногда нужно вручную проверить какой-то класс

// свойство .classname устарело, оно содержит в себе классы в виде одной строки
console.log(btns[0].className); // в консоле будет например - blue some
// чтобы манипулировать этими классами придётся постоянно изменить эту строчку


//===================================================================


// ДЕЛЕГИРОВАНИЕ СОБЫТИЙ
// на странице много кнопок, задача - чтобы при клике на каждую, вызывалось одно и тоже событие
// и можем взять обработчик событий и повесить на каждую из них отдельно
// но если кнопки или другие элементы будут добавляться без нашего ведома
// то событий у них уже не будет, ведь они не обрабатываются циклом, 
// где мы назначаем обработчик на каждую из них 

// мы берём элемент для всех этих кнопок, допустим плашка за ними, и работаем с ней