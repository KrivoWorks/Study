"Use strict";

//DOM - Document Object Model - объектная модель документа
// весь html код является обычным документом, у которого есть своя структура
// узлы (элементы) между собой представлены как - родительский и дочерний
// такая структура создаётся во время вёрстки
// когда такой элемент сформирован - мы можем представить его в виде обычного объекта
// как и у любого объекта у него могут быть свои методы
// их мы и будем использовать для доступа к определённым элементам на странице
// чтобы обратиться к DOM нужно воспользоваться document
// и как мы поставим . нам будут доступны свойства и методы
// методы получения элементов со страницы можно разделить на "старые" и "новые"


//===================================================================

// "старые"
const box = document.getElementById("box");
// id на странице html файла может быть только один
console.log(box); // такой код работать внутри vscode работать не будет
// у него не существует такого объекта как document
// он существует только внутри браузера
// в консоле браузера будет выведен искомый элемент

// получить элементы через название тегов
// но одинаковых тегов на странице может быть десятки, сотни и тысячи
// используя поиск по тегам - получим коллекцию элементов - псевдомассивы
// псевдомассивы - это массивы, но без всех методов
const btns = document.getElementsByTagName("button");
// в переменную btns получили не один элемент а псевдомассив
console.log(btns); // HTMLCollection(5) [button, button, button, button, button,]
// HTMLCollection(5) массивоподобный элемент
// получить отдельную кнопку можно через индекс, это можно делать 2 способами:
// 1й
const btnsA = document.getElementsByTagName("button")[1];
// 2й
console.log(btnsA[1]);

// если на странице будет только один элемент
// всё равно создастся HTML коллекция (массив) с 1 элементом
// если на странице только один элемент, мы присваиваем его переменной
// и захотим с ней что-то сделать, например поменять стиль - цвет
// сделать это не получится, тк мы будем взаимодействовать с массивом
// для этого необходимо обратиться только к кнопке
console.log(btnsA[0]);

// получить элементы через определённый класс
const circle = document.getElementsByClassName("circle"); // обращаемся к классу без .
// метод уже знает, что мы обращаемся к классу
// работает он точно также как и поиск по тегам - мы получим HTML коллекцию

// обратим внимание на название метода
document.getElementById(); // getElement - только один элемент
document.getElementsByTagName(); // getElements - коллекция
document.getElementsByClassName(); // getElements - коллекция


//===================================================================

// "новые"
const hearts = document.querySelectorAll(); // в круглые скобки помещаем css селектор
// css селектор например - *, div, #id, .class и прочие
// у этого метода есть один плюс - метод получает псевдомассив с одним методом - ForEach
const heartsA = document.querySelectorAll(".heart"); // ставим точку
// тк используем селекторы а их может быть много
console.log(heartsA); // NodeList(3) [div.heart, div.heart, div.heart]

heartsA.forEach(item => {
    console.log(item);
});

// querySelector - метод позволяющий получить только 1, первый элемент со страницы
const oneHeart = document.querySelector(".heart");