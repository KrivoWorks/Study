"Use strict";

//ЗАГРУЗКА СКРИПТОВ НА СТРАНИЦУ
// частая ошибка когда в html тег <script> переносят в head, это вызывает 2 проблемы
// 1: DOM структура ещё не построилась и если в этом скрипте будет взаимодействие с элементами
// которых ещё нет на странице, то появится ошибка
// 2: после загрузки данных, стилей, перходит к загрузке скрипта
// браузер дожидается когда скрипт будет полностью загружен и на этом месте зависает
// если скрипт будет объёмный или сервер подвисает, значит страница грузиться не будет
// DOM структура не будет строиться, она будет ждать скрипт

// первая проблема частично решается через DOMContentLoaded
// от второй проблемы так избавиться не можем, поэтому скрипт в самом низу нашей страницы
// проблемы могут возникнуть когда будем работать с очень большими проектами
// построение html структуры занимает какое-то время, а если вёрстки будет очень много
// значит и скрипт начнёт загружаться через какое-то время

//===================================================================

// два атрибута которые помагают решить эти проблемы

// в html структуре в начало <body> помещаем <script>
// и прописываем атрибут defer <script defer src="js/script.js"></script>

// в js файле прописываем переменную и любое действие с html структурой (querySelectorAll)
// и в console.log выводим переменную
// в консоле получим псевдомассив со всеми отобранными элементами
// хотя скрипт находится перед всеми элементами

// тестируем тоже самое, убирая defer и псевдомассив пуст
// defer - сообщает браузеру, что он должен продолжать обрабатывать страницу
// и загружать скрипт в фоновом режиме а затем запустить этот скрипт когда он загрузится

// Defer - особенности
// скрипты с defer никогда не блокируют страницу
// скрипты с defer выполняются когда DOM дерево будет готово
// поэтому этот скрипт можно взять и поместить в header

// такие отложенные скрипты с атрибутом defer сохраняют порядок относительно друг друга
// как и обычные скрипты
// мы можем сначала подключить библиотеку с полезными утилитами, как например jQuery
// а следующим скрипт который использует возможности этой библиотеки и зависит от неё
// при этом страница не блокируется пока всё это загружается

// Google Test speed всё равно будут ругаться и просить перенести тег script в конец

//===================================================================

// Async - возможности которые даёт этот атрибут
// 1: страница не ждёт асинхронных скриптов, содержимое просто обрабатывается и отображается
// 2: события в DOMContentLoaded и асинхронные скрипты не ждут друг друга
// 3: какой первый скрипт с async загрузился тот и начинает работать, скрипты не ждут друг друга

// для чего такие скрипты ? иногда нужно подключать сторонние скрипты, например метрики и счётчики

//===================================================================

// создадим новый элемент на странице
const script = document.createElement('script'); // помещаем новосозданный элемент в переменную
script.src = "js/test.js"; // устанавливаем путь
document.body.append(script); // добавляем элемент на страницу
// скрипт (Test) начнёт загружаться только после того как он будет добавлен в элемент (61я строка)
// результат в отображении псевдомассива и с задержкой информации в test.js
// особенность - динамически загружаемые скрипты по умолчанию ведут себя как async


// мы можем изменить порядок загрузки скриптов
function loadScript(src) {
    const scriptB = document.createElement('script');
    scriptB.src = src;
    scriptB.async = false;
    document.body.append(scriptB);
}

loadScript("js/test.js");
loadScript("js/some.js");